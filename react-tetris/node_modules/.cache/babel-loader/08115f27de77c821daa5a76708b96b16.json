{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport { checkCollision, STAGE_WIDTH } from '../gameHelpers';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nexport const usePlayer = () => {\n  _s();\n\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n\n  const rotate = (matrix, dir) => {\n    const rotatedTetromino = matrix.map((_, index) => matrix.map(col => col[index]));\n\n    if (dir > 0) {\n      return rotatedTetromino.map(row => row.reverse());\n    }\n\n    return rotatedTetromino.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    const playerClone = JSON.parse(JSON.stringify(player));\n    playerClone.tetromino = rotate(playerClone.tetromino, dir);\n    const pos = playerClone.pos.x;\n    let offset = 1;\n\n    while (checkCollision(playerClone, stage, {\n      x: 0,\n      y: 0\n    })) {\n      playerClone.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n\n      if (offset > playerClone.tetromino[0].length) {\n        rotate(playerClone.tetromino, -dir);\n        playerClone.pos.x = pos;\n      }\n    }\n\n    setPlayer(playerClone);\n  };\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n\n_s(usePlayer, \"g9suUNtIhrdplFF3khG+hnPLA3o=\");","map":{"version":3,"sources":["/home/jordan/Desktop/Projects/React Tetris (Hooks)/react-tetris/src/hooks/usePlayer.js"],"names":["useCallback","useState","checkCollision","STAGE_WIDTH","TETROMINOS","randomTetromino","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","rotate","matrix","dir","rotatedTetromino","map","_","index","col","row","reverse","playerRotate","stage","playerClone","JSON","parse","stringify","offset","length","updatePlayerPos","prev","resetPlayer"],"mappings":"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","sourcesContent":["import { useCallback, useState } from 'react';\nimport { checkCollision, STAGE_WIDTH } from '../gameHelpers';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: { x: 0, y: 0 },\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n    });\n\n    const rotate = (matrix, dir) => {\n        const rotatedTetromino = matrix.map((_, index) => \n            matrix.map(col => col[index]),\n        );\n\n        if (dir > 0) {\n            return rotatedTetromino.map(row => row.reverse());\n        }\n        return rotatedTetromino.reverse();\n    }\n\n    const playerRotate = (stage, dir) => {\n        const playerClone = JSON.parse(JSON.stringify(player));\n        playerClone.tetromino = rotate(playerClone.tetromino, dir);\n\n        const pos = playerClone.pos.x;\n        let offset = 1;\n        while(checkCollision(playerClone, stage, { x: 0, y: 0 })) {\n            playerClone.pos.x += offset;\n            offset = -(offset + (offset > 0 ? 1 : -1));\n            if (offset > playerClone.tetromino[0].length) {\n                rotate(playerClone.tetromino, -dir);\n                playerClone.pos.x = pos;\n            }\n        }\n\n        setPlayer(playerClone);\n    }\n\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n            collided,\n        }))\n    }\n\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n    }, [])\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n}"]},"metadata":{},"sourceType":"module"}